--- a/configure.ac
+++ b/configure.ac
@@ -264,7 +264,7 @@
 
 dnl need to change quotes to allow square brackets
 changequote(<<, >>)dnl
-PYTHON_VERSION=`$PYTHON -c 'import sys; print sys.version[:3]' 2>/dev/null`
+PYTHON_VERSION=`$PYTHON -c 'import sys; print(sys.version[:3])' 2>/dev/null`
 changequote([, ])dnl
 if test "X$PYTHON_VERSION" != X; then
   languages_available="$languages_available python($PYTHON_VERSION)"
@@ -292,8 +292,8 @@
   fi
 
   AC_MSG_CHECKING(Python includes)
-  python_prefix=`$PYTHON -c 'import sys; print sys.prefix' 2>/dev/null`
-  python_exec_prefix=`$PYTHON -c "import sys; print sys.exec_prefix"`
+  python_prefix=`$PYTHON -c 'import sys; print(sys.prefix)' 2>/dev/null`
+  python_exec_prefix=`$PYTHON -c "import sys; print(sys.exec_prefix)"`
 
   if test "X$PYTHON_INCLUDES" != X; then
     AC_MSG_RESULT(using user includes: $PYTHON_INCLUDES)
@@ -311,7 +311,7 @@
   if test "X$PYTHON_LIB" != X; then
     AC_MSG_RESULT(using user lib: $PYTHON_LIB)
   else
-    PYTHON_LIB=`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_python_lib($get_python_lib_args)"`
+    PYTHON_LIB=`$PYTHON -c "import distutils.sysconfig; print(distutils.sysconfig.get_python_lib($get_python_lib_args))"`
     AC_MSG_RESULT($PYTHON_LIB)
   fi
 
--- a/python/RDF.py
+++ b/python/RDF.py
@@ -125,6 +125,15 @@
 
 import Redland
 
+if sys.version_info >= (3,0,0):
+  PY3 = True
+  def unicode(s, enc=None):
+    if not isinstance(s, str):
+      return str(s)
+    else:
+      return s
+else:
+  PY3 = False
 
 class RedlandError(Exception):
   """Redland Runtime errors"""
@@ -132,7 +141,7 @@
     self.value = value
 
   def __str__(self):
-    return `self.value`
+    return repr(self.value)
 
 class NodeTypeError(RedlandError):
   pass
@@ -142,14 +151,14 @@
 
 def node_type(name):
   """Return the Redland node type of a node name"""
-  if _node_types.has_key(name):
+  if name in _node_types:
     return _node_types[name]
   else:
     raise NodeTypeError('Unknown node type %s' % name)
 
 def node_type_name(num):
   """Return the name of a Redland node type"""
-  for n in _node_types.keys():
+  for n in list(_node_types.keys()):
     if num==_node_types[n]:
       return n
   raise NodeTypeError('Unknown node type number %d' % num)
@@ -184,7 +193,7 @@
     global _debug    
     if self._world:
       if _debug:
-        print "Destroying RDF.World"
+        print("Destroying RDF.World")
       self._cleanup(self._world)
 
 # end class World
@@ -259,13 +268,13 @@
     global _world
     global _debug
     if _debug:
-      print "Creating RDF.Node args=",args
+      print("Creating RDF.Node args=",args)
     self._node=None
 
     if arg is not None:
       if isinstance(arg, str):
         args['literal'] = arg
-      elif isinstance(arg, unicode):
+      elif not PY3 and isinstance(arg, unicode):
         import Redland_python
         args['literal'] = Redland_python.unicode_to_bytes(arg)
       elif isinstance(arg, Uri):
@@ -273,32 +282,32 @@
       elif isinstance(arg, Node):
         args['node'] = arg
 
-    if args.has_key('literal') and isinstance(args['literal'], unicode):
+    if not PY3 and 'literal' in args and isinstance(args['literal'], unicode):
         import Redland_python
         args['literal'] = Redland_python.unicode_to_bytes(args['literal'])
 
-    if args.has_key('uri_string'):
+    if 'uri_string' in args:
       self._node=Redland.librdf_new_node_from_uri_string(_world._world,
         args['uri_string'])
 
-    elif args.has_key('uri'):
+    elif 'uri' in args:
       # no need to copy the underlying uri as the redland C api does
       # this on node construction
       self._node = Redland.librdf_new_node_from_uri(_world._world,
               args['uri']._reduri)
 
-    elif args.has_key('literal'):
-      if args.has_key('xml_language'):
+    elif 'literal' in args:
+      if 'xml_language' in args:
         xml_language=args['xml_language']
-      elif args.has_key('language'):
+      elif 'language' in args:
         xml_language=args['language']
       else:
         xml_language=None
-      if args.has_key('is_wf_xml'):
+      if 'is_wf_xml' in args:
         is_wf_xml=args['is_wf_xml']
       else:
         is_wf_xml=0
-      if args.has_key('datatype'):
+      if 'datatype' in args:
         datatype=args['datatype']
         self._node=Redland.librdf_new_node_from_typed_literal(_world._world,
           args['literal'], xml_language, datatype._reduri)
@@ -306,14 +315,14 @@
         self._node=Redland.librdf_new_node_from_literal(_world._world,
           args['literal'], xml_language, is_wf_xml)
 
-    elif args.has_key('node'):
+    elif 'node' in args:
       self._node=Redland.librdf_new_node_from_node(args['node']._node)
 
-    elif args.has_key('blank'):
+    elif 'blank' in args:
       self._node=Redland.librdf_new_node_from_blank_identifier(_world._world, args['blank'])
 
-    elif args.has_key('from_object'):
-      if args.has_key('do_not_copy'):
+    elif 'from_object' in args:
+      if 'do_not_copy' in args:
         self._node=args['from_object']
       else:
         self._node=Redland.librdf_new_node_from_node(args['from_object'])
@@ -327,10 +336,10 @@
     """Free an RDF Node (destructor)."""
     global _debug    
     if _debug:
-      print "Destroying RDF.Node"
+      print("Destroying RDF.Node")
     if self._node:
       if _debug:
-        print "Deleting Redland node object"
+        print("Deleting Redland node object")
       Redland.librdf_free_node(self._node)
 
   def _get_uri(self):
@@ -399,7 +408,11 @@
 
   def __str__(self):
     """Get a string representation of an RDF Node."""
-    return unicode(self).encode('utf-8')
+    value = self.__unicode__()
+    if PY3:
+      return value
+    else:
+      return value.encode('utf-8')
 
   def __unicode__(self):
     """Get a Unicode string representation of an RDF Node."""
@@ -423,7 +436,7 @@
     return not self == other
 
   def __hash__(self):
-    return hash(str(self))
+    return hash(unicode(self))
 
   def is_resource(self):
     """Return true if node is a resource  with a URI"""   
@@ -474,15 +487,15 @@
     global _world
     global _debug    
     if _debug:
-      print "Creating RDF.Statement subject=",subject,"predicate=",predicate,"object=",object,"args=",args
+      print("Creating RDF.Statement subject=",subject,"predicate=",predicate,"object=",object,"args=",args)
 
     self._statement = None
 
-    if args.has_key('statement'):
+    if 'statement' in args:
       self._statement=Redland.librdf_new_statement_from_statement(
           args['statement']._statement)
 
-    elif args.has_key('from_object'):
+    elif 'from_object' in args:
       self._statement = Redland.librdf_new_statement_from_statement(
           args['from_object'])
 
@@ -492,7 +505,7 @@
       else:
         if isinstance(subject, Uri) or isinstance(subject, str):
           subject = Node(subject)
-        elif isinstance(subject, unicode):
+        elif not PY3 and isinstance(subject, unicode):
           import Redland_python
           subject = Node(Redland_python.unicode_to_bytes(subject))
         s = Redland.librdf_new_node_from_node(subject._node)
@@ -502,7 +515,7 @@
       else:
         if isinstance(predicate, Uri) or isinstance(predicate, str):
           predicate = Node(predicate)
-        elif isinstance(predicate, unicode):
+        elif not PY3 and isinstance(predicate, unicode):
           import Redland_python
           predicate = Node(Redland_python.unicode_to_bytes(predicate))
         p = Redland.librdf_new_node_from_node(predicate._node)
@@ -512,7 +525,7 @@
       else:
         if isinstance(object, Uri) or isinstance(object, str):
           object = Node(object)
-        elif isinstance(object, unicode):
+        elif not PY3 and isinstance(object, unicode):
           import Redland_python
           object = Node(Redland_python.unicode_to_bytes(object))
         o = Redland.librdf_new_node_from_node(object._node)
@@ -526,10 +539,10 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.Statement"
+      print("Destroying RDF.Statement")
     if self._statement:
       if _debug:
-        print "Deleting Redland statement object"
+        print("Deleting Redland statement object")
       Redland.librdf_free_statement(self._statement)
 
   def _wrap_node(self, rednode):
@@ -666,20 +679,20 @@
     global _world
     global _debug    
     if _debug:
-      print "Creating RDF.Model args=",args
+      print("Creating RDF.Model args=",args)
     self._model=None
     self._storage=None
 
     if storage is None:
       storage = MemoryStorage()
 
-    if args.has_key('options_string'):
+    if 'options_string' in args:
       self._model=Redland.librdf_new_model(_world._world, storage._storage,
         args['options_string'])
-    elif args.has_key('options_hash'):
+    elif 'options_hash' in args:
       self._model=Redland.librdf_new_model_with_options( _world._world,
         storage._storage, args['options_hash'].hash)
-    elif args.has_key('model'):
+    elif 'model' in args:
       self._model=Redland.librdf_new_model_from_model(storage._storage,
                                                      args['model']._model)
     else:
@@ -698,7 +711,7 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.Model"
+      print("Destroying RDF.Model")
     if self._model:
       Redland.librdf_free_model(self._model)
 
@@ -911,7 +924,7 @@
       predicate = Node(predicate)
     if isinstance(target, Uri) or isinstance(target, str):
       target = Node(target)
-    elif isinstance(target, unicode):
+    elif isinstance(target, str):
       import Redland_python
       target = Node(Redland_python.unicode_to_bytes(target))
 
@@ -944,7 +957,7 @@
       source = Node(source)
     if isinstance(target, Uri) or isinstance(target, str):
       target = Node(target)
-    elif isinstance(target, unicode):
+    elif isinstance(target, str):
       import Redland_python
       target = Node(Redland_python.unicode_to_bytes(target))
 
@@ -1001,7 +1014,7 @@
       predicate = Node(predicate)
     if isinstance(target, Uri) or isinstance(target, str):
       target = Node(target)
-    elif isinstance(target, unicode):
+    elif isinstance(target, str):
       import Redland_python
       target = Node(Redland_python.unicode_to_bytes(target))
 
@@ -1019,7 +1032,7 @@
       source = Node(source)
     if isinstance(target, Uri) or isinstance(target, str):
       target = Node(target)
-    elif isinstance(target, unicode):
+    elif isinstance(target, str):
       import Redland_python
       target = Node(Redland_python.unicode_to_bytes(target))
 
@@ -1090,7 +1103,7 @@
    """
     if isinstance(uri, str):
       uri = Uri(string=uri)
-    elif isinstance(uri, unicode):
+    elif not PY3 and isinstance(uri, unicode):
       import Redland_python
       uri = Uri(string=Redland_python.unicode_to_bytes(uri))
     if uri is None:
@@ -1099,7 +1112,7 @@
 
     if isinstance(type_uri, str):
       type_uri = Uri(string=type_uri)
-    elif isinstance(type_uri, unicode):
+    elif not PY3 and isinstance(type_uri, unicode):
       import Redland_python
       type_uri = Uri(string=Redland_python.unicode_to_bytes(type_uri))
     if type_uri is not None:
@@ -1128,7 +1141,7 @@
    """
     if isinstance(base_uri, str):
       base_uri = Uri(string=base_uri)
-    elif isinstance(base_uri, unicode):
+    elif not PY3 and isinstance(base_uri, unicode):
       import Redland_python
       base_uri = Uri(string=Redland_python.unicode_to_bytes(base_uri))
     if base_uri is not None:
@@ -1137,7 +1150,7 @@
       rbase_uri = None
     if isinstance(type_uri, str):
       type_uri = Uri(string=type_uri)
-    elif isinstance(type_uri, unicode):
+    elif not PY3 and isinstance(type_uri, unicode):
       import Redland_python
       type_uri = Uri(string=Redland_python.unicode_to_bytes(type_uri))
     if type_uri is not None:
@@ -1195,7 +1208,7 @@
     """Create an RDF Iterator (constructor)."""
     global _debug    
     if _debug:
-      print "Creating RDF.Iterator object=",object,"creator=",creator1
+      print("Creating RDF.Iterator object=",object,"creator=",creator1)
 
     self._iterator=object
     # keep references to the things we're iterating over so they
@@ -1210,7 +1223,7 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.Iterator"
+      print("Destroying RDF.Iterator")
     if self._iterator:
       Redland.librdf_free_iterator(self._iterator)
 
@@ -1219,8 +1232,8 @@
     return Redland.librdf_iterator_end(self._iterator)
 
   def have_elements(self):
-    print """RDF.Iterator method have_elements is deprecated,
-please use 'not iterator.end' instead."""
+    print("""RDF.Iterator method have_elements is deprecated,
+please use 'not iterator.end' instead.""")
     return Redland.librdf_iterator_have_elements(self._iterator)
 
   def current(self):
@@ -1231,9 +1244,10 @@
 
     return Node(from_object=my_node)
 
-  def next(self):
+  def __next__(self):
     """Move to the next object on the Iterator"""
     Redland.librdf_iterator_next(self._iterator)
+  next = __next__
 
   def context(self):
     """Return the context Node of the current object on the Iterator"""
@@ -1249,84 +1263,88 @@
   def __init__(self,stream):
     global _debug
     if _debug:
-      print "Creating StreamWithContextIter for Stream "+repr(stream)  
+      print("Creating StreamWithContextIter for Stream "+repr(stream))
     self.stream = stream
     self.first = 1
 
   def __iter__(self):
     return self
 
-  def next(self):
+  def __next__(self):
     if self.first:
       self.first = 0
     else:
-      self.stream.next()
+      next(self.stream)
     if self.stream is None or self.stream.end():
       raise StopIteration
     return (self.stream.current(), self.stream.context())
+  next = __next__
 
 class IteratorWithContextIter(object):
   def __init__(self,iterator):
     global _debug
     if _debug:
-      print "Creating IteratorWithContextIter for Iterator "+repr(iterator)  
+      print("Creating IteratorWithContextIter for Iterator "+repr(iterator))
     self.iterator = iterator
     self.first = 1
 
   def __iter__(self):
     return self
 
-  def next(self):
+  def __next__(self):
     if self.first:
       self.first = 0
     else:
-      self.iterator.next()
+      next(self.iterator)
     if self.iterator is None or self.iterator.end():
       raise StopIteration
     try:
       return (self.iterator.current(), self.iterator.context())
     except AttributeError:
       return (self.iterator.current(), None)
+  next = __next__
 
 class IteratorIter(object):
   def __init__(self,iterator):
     global _debug
     if _debug:
-      print "Creating IteratorIter for Iterator "+repr(iterator)  
+      print("Creating IteratorIter for Iterator "+repr(iterator))
     self.iterator = iterator
     self.first = 1
 
   def __iter__(self):
     return self
 
-  def next(self):
+  def __next__(self):
     if self.first:
       self.first = 0
     else:
-      self.iterator.next()
+      next(self.iterator)
     if self.iterator is None or self.iterator.end():
       raise StopIteration
     return self.iterator.current()
+  next = __next__
 
 class StreamIter:
   def __init__(self,stream):
     global _debug
     if _debug:
-      print "Creating StreamIter for Stream "+repr(stream)  
+      print("Creating StreamIter for Stream "+repr(stream))
     self.stream = stream
     self.first = 1
 
   def __iter__(self):
     return self
 
-  def next(self):
+  def __next__(self):
     if self.first:
       self.first = 0
     else:
-      self.stream.next()
+      next(self.stream)
     if self.stream is None or self.stream.end():
       raise StopIteration
     return self.stream.current()
+  next = __next__
 
 class Stream(object):
   """Redland Statement Stream class
@@ -1349,7 +1367,7 @@
     """Create an RDF Stream (constructor)."""
     global _debug    
     if _debug:
-      print "Creating RDF.Stream for object",object, "creator",creator
+      print("Creating RDF.Stream for object",object, "creator",creator)
 
     self._stream=object
 
@@ -1371,7 +1389,7 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.Stream"
+      print("Destroying RDF.Stream")
     if self._stream:
       Redland.librdf_free_stream(self._stream)
 
@@ -1391,12 +1409,13 @@
       return None
     return Statement(from_object=my_statement)
 
-  def next(self):
+  def __next__(self):
     """Move to the next Statement on the Stream"""
     if not self._stream:
       return 1
 
     return Redland.librdf_stream_next(self._stream)
+  next = __next__
 
   def context(self):
     """Return the context Node of the current object on the Stream"""
@@ -1507,15 +1526,15 @@
     global _world
     global _debug    
     if _debug:
-      print "Creating RDF.Storage args=",args
+      print("Creating RDF.Storage args=",args)
     self._storage=None
 
-    if (args.has_key('storage_name') and
-        args.has_key('name') and 
-        args.has_key('options_string')):
+    if ('storage_name' in args and
+        'name' in args and
+        'options_string' in args):
       self._storage=Redland.librdf_new_storage(_world._world,
           args['storage_name'], args['name'], args['options_string'])
-    elif args.has_key('storage'):
+    elif 'storage' in args:
       self._storage=Redland.librdf_new_storage_from_storage(
           args['storage']._storage)
     else:
@@ -1528,7 +1547,7 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.Storage"
+      print("Destroying RDF.Storage")
     if self._storage:
       Redland.librdf_free_storage(self._storage)
 
@@ -1608,23 +1627,23 @@
     global _world
     global _debug    
     if _debug:
-      print "Creating RDF.Uri arg,args=",arg,args
+      print("Creating RDF.Uri arg,args=",arg,args)
     self._reduri=None
 
     if arg is not None:
       if isinstance(arg, str):
         args['string'] = arg
-      elif isinstance(arg, unicode):
+      elif not PY3 and isinstance(arg, unicode):
         import Redland_python
         args['string'] = Redland_python.unicode_to_bytes(arg)
       elif isinstance(arg, Uri):
         args['uri'] = arg
 
-    if args.has_key('string') and args['string'] is not None:
+    if 'string' in args and args['string'] is not None:
       self._reduri=Redland.librdf_new_uri(_world._world, args['string'])
-    elif args.has_key('uri'):
+    elif 'uri' in args:
       self._reduri=Redland.librdf_new_uri_from_uri(args['uri']._reduri)
-    elif args.has_key('from_object'):
+    elif 'from_object' in args:
       if args['from_object']!=None:
         self._reduri=Redland.librdf_new_uri_from_uri(args['from_object'])
       else:
@@ -1636,10 +1655,10 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.Uri"
+      print("Destroying RDF.Uri")
     if self._reduri:
       if _debug:
-        print "Deleting Redland uri object"
+        print("Deleting Redland uri object")
       Redland.librdf_free_uri(self._reduri)
 
   def __str__(self):
@@ -1651,7 +1670,7 @@
     return unicode(Redland.librdf_uri_to_string(self._reduri), 'utf-8')
 
   def __hash__(self):
-    return hash(str(self))
+    return hash(unicode(self))
   
   def __eq__(self,other):
     """Equality of RDF URI to another RDF URI."""
@@ -1697,7 +1716,7 @@
     global _world
     global _debug    
     if _debug:
-      print "Creating RDF.Parser name=",name,"mime_type=",mime_type, "uri=",uri
+      print("Creating RDF.Parser name=",name,"mime_type=",mime_type, "uri=",uri)
 
     self._parser = None
 
@@ -1713,7 +1732,7 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.Parser"
+      print("Destroying RDF.Parser")
     if self._parser:
       Redland.librdf_free_parser(self._parser)
 
@@ -1728,7 +1747,7 @@
     """
     if isinstance(uri, str):
       uri = Uri(string=uri)
-    elif isinstance(uri, unicode):
+    elif not PY3 and isinstance(uri, unicode):
       import Redland_python
       uri = Uri(string=Redland_python.unicode_to_bytes(uri))
     if base_uri is None:
@@ -1748,13 +1767,13 @@
     """
     if isinstance(base_uri, str):
       base_uri = Uri(string=base_uri)
-    elif isinstance(base_uri, unicode):
+    elif not PY3 and isinstance(base_uri, unicode):
       import Redland_python
       base_uri = Uri(string=Redland_python.unicode_to_bytes(base_uri))
     if base_uri is None:
       raise RedlandError("A base URI is required when parsing a string")
 
-    if isinstance(string, unicode):
+    if not PY3 and isinstance(string, unicode):
       import Redland_python
       string=Redland_python.unicode_to_bytes(string)
 
@@ -1778,12 +1797,12 @@
 
     if isinstance(uri, str):
       uri = Uri(string = uri)
-    elif isinstance(uri, unicode):
+    elif not PY3 and isinstance(uri, unicode):
       import Redland_python
       uri = Uri(string=Redland_python.unicode_to_bytes(uri))
     if isinstance(base_uri, str):
       base_uri = Uri(string = base_uri)
-    elif isinstance(base_uri, unicode):
+    elif not PY3 and isinstance(base_uri, unicode):
       import Redland_python
       base_uri = Uri(string=Redland_python.unicode_to_bytes(base_uri))
     if base_uri is None:
@@ -1796,8 +1815,8 @@
     try:
       rc = Redland.librdf_parser_parse_into_model(self._parser,
         uri._reduri, base_uri._reduri, model._model)
-    except RedlandError, err:
-      print "Caught error",err
+    except RedlandError as err:
+      print("Caught error",err)
       raise err
 
     if handler is not None:
@@ -1817,7 +1836,7 @@
     """
     if isinstance(base_uri, str):
       base_uri = Uri(string = base_uri)
-    elif isinstance(base_uri, unicode):
+    elif not PY3 and isinstance(base_uri, unicode):
       import Redland_python
       base_uri = Uri(string=Redland_python.unicode_to_bytes(base_uri))
     if base_uri is None:
@@ -1827,7 +1846,7 @@
       import Redland_python
       Redland_python.set_callback(handler)
 
-    if isinstance(string, unicode):
+    if not PY3 and isinstance(string, unicode):
       import Redland_python
       string=Redland_python.unicode_to_bytes(string)
 
@@ -1960,7 +1979,7 @@
     if querystring is None:
       raise RedlandError("No query string given")
 
-    if isinstance(querystring, unicode): 
+    if not PY3 and isinstance(querystring, unicode):
       querystring = querystring.encode('utf-8')
 
     if query_uri is not None:
@@ -1976,7 +1995,7 @@
     global _world
     global _debug
     if _debug:
-      print "Creating query for language '"+query_language+"', base '"+str(rbase_uri)+"': "+querystring
+      print("Creating query for language '"+query_language+"', base '"+unicode(rbase_uri)+"': "+querystring)
 
     self._query = Redland.librdf_new_query(_world._world, query_language, ruri, querystring, rbase_uri)
     self.result_stream = None
@@ -1987,7 +2006,7 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.Query"
+      print("Destroying RDF.Query")
     if self._query:
       Redland.librdf_free_query(self._query)
 
@@ -2022,7 +2041,7 @@
   def __init__(self,query,results):
     global _debug
     if _debug:
-      print "Creating QueryResults"
+      print("Creating QueryResults")
     self._query = query
     self._results = results
     self.first = True
@@ -2047,7 +2066,7 @@
     raise ValueError("Cannot take the length of iterable query results")
 
   # Iterator method
-  def next(self):
+  def __next__(self):
     """Get the next variable binding result"""
     if not self.is_bindings():
       raise RedlandError("Query result is not in variable bindings format")
@@ -2058,6 +2077,7 @@
     if Redland.librdf_query_results_finished(self._results):
       raise StopIteration
     return self.make_results_hash()
+  next = __next__
 
   def make_results_hash(self):
     results = {}
@@ -2129,7 +2149,7 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.QueryResults"
+      print("Destroying RDF.QueryResults")
     if self._results:
       Redland.librdf_free_query_results(self._results)
 
@@ -2137,7 +2157,7 @@
     """Serialize to filename name in syntax format_uri using the optional base URI."""
     if isinstance(format_uri, str):
       format_uri = Uri(string = format_uri)
-    elif isinstance(format_uri, unicode):
+    elif not PY3 and isinstance(format_uri, unicode):
       import Redland_python
       format_uri = Uri(string=Redland_python.unicode_to_bytes(format_uri))
     else:
@@ -2150,7 +2170,7 @@
 
     if isinstance(base_uri, str):
       base_uri = Uri(string = base_uri)
-    elif isinstance(base_uri, unicode):
+    elif not PY3 and isinstance(base_uri, unicode):
       import Redland_python
       base_uri = Uri(string=Redland_python.unicode_to_bytes(base_uri))
     if base_uri is not None:
@@ -2168,14 +2188,14 @@
       return serializer.serialize_model_to_string(tmpmodel, base_uri)
 
     if self.is_boolean():
-      return str(self.get_boolean())
+      return unicode(self.get_boolean())
 
     if not self.is_bindings():
       raise RedlandError("Unknown query result format cannot be written as a string")
     
     if isinstance(format_uri, str):
       format_uri = Uri(string = format_uri)
-    elif isinstance(format_uri, unicode):
+    elif not PY3 and isinstance(format_uri, unicode):
       import Redland_python
       format_uri = Uri(string=Redland_python.unicode_to_bytes(format_uri))
     else:
@@ -2187,7 +2207,7 @@
       rformat_uri = None
     if isinstance(base_uri, str):
       base_uri = Uri(string = base_uri)
-    elif isinstance(base_uri, unicode):
+    elif not PY3 and isinstance(base_uri, unicode):
       import Redland_python
       base_uri = Uri(string=Redland_python.unicode_to_bytes(base_uri))
     if base_uri is not None:
@@ -2234,8 +2254,8 @@
     global _world
     global _debug    
     if _debug:
-      print "Creating RDF.Serializer name=",name,"mime_type=",mime_type, \
-        "uri=",uri
+      print("Creating RDF.Serializer name=",name,"mime_type=",mime_type, \
+        "uri=",uri)
 
     self._serializer = None
 
@@ -2252,7 +2272,7 @@
   def __del__(self):
     global _debug    
     if _debug:
-      print "Destroying RDF.Serializer"
+      print("Destroying RDF.Serializer")
     if self._serializer:
       Redland.librdf_free_serializer(self._serializer)
 
@@ -2261,7 +2281,7 @@
        optional base URI."""
     if isinstance(base_uri, str):
       base_uri = Uri(string = base_uri)
-    elif isinstance(base_uri, unicode):
+    elif not PY3 and isinstance(base_uri, unicode):
       import Redland_python
       base_uri = Uri(string=Redland_python.unicode_to_bytes(base_uri))
     if base_uri is not None:
@@ -2275,7 +2295,7 @@
     """Serialize to a string using the optional base URI."""
     if isinstance(base_uri, str):
       base_uri = Uri(string = base_uri)
-    elif isinstance(base_uri, unicode):
+    elif not PY3 and isinstance(base_uri, unicode):
       import Redland_python
       base_uri = Uri(string=Redland_python.unicode_to_bytes(base_uri))
     if base_uri is not None:
@@ -2288,7 +2308,7 @@
     """Serialize a stream to a string using the optional base URI."""
     if isinstance(base_uri, str):
       base_uri = Uri(string = base_uri)
-    elif isinstance(base_uri, unicode):
+    elif not PY3 and isinstance(base_uri, unicode):
       import Redland_python
       base_uri = Uri(string=Redland_python.unicode_to_bytes(base_uri))
     if base_uri is not None:
@@ -2304,7 +2324,7 @@
     if not isinstance(uri, Uri):
       if isinstance(uri, str):
         uri = Uri(string=uri)
-      elif isinstance(uri, unicode):
+      elif not PY3 and isinstance(uri, unicode):
         import Redland_python
         uri = Uri(string=Redland_python.unicode_to_bytes(uri))
       else:
@@ -2317,7 +2337,7 @@
     if not isinstance(uri, Uri):
       if isinstance(uri, str):
         uri = Uri(string=uri)
-      elif isinstance(uri, unicode):
+      elif not PY3 and isinstance(uri, unicode):
         import Redland_python
         uri = Uri(string=Redland_python.unicode_to_bytes(uri))
       else:
@@ -2329,7 +2349,7 @@
     if not isinstance(uri, Uri):
       if isinstance(uri, str):
         uri = Uri(string=uri)
-      elif isinstance(uri, unicode):
+      elif not PY3 and isinstance(uri, unicode):
         import Redland_python
         uri = Uri(string=Redland_python.unicode_to_bytes(uri))
       else:
--- a/python/redland-post.i
+++ b/python/redland-post.i
@@ -23,8 +23,17 @@
 
 void librdf_python_world_init(librdf_world *world);
 
+#if PY_MAJOR_VERSION >= 3
+PyObject*
+#else
+void
+#endif
+SWIG_init(void);
 
-void SWIG_init(void);
+#if PY_MAJOR_VERSION >= 3
+#define PyInt_AS_LONG PyLong_AsLong
+#define PyString_FromStringAndSize PyBytes_FromStringAndSize
+#endif
 
 static PyObject *librdf_python_callback = NULL;
 
@@ -275,6 +284,19 @@
   {NULL, NULL, 0, NULL}        /* Sentinel */
 };
 
+#if PY_MAJOR_VERSION >= 3
+static struct PyModuleDef librdf_python_moduledef = {
+  PyModuleDef_HEAD_INIT,
+  "Redland_python",
+  NULL, /* doc string */
+  -1, /* per module memory */
+  librdf_python_methods,
+  NULL, /* Unused, reload */
+  NULL, /* GC traverse */
+  NULL, /* GC clearing*/
+  NULL  /* free during deallocation */
+};
+#endif
 
 /*
  * stores a redland error message for later
@@ -359,8 +381,14 @@
   PyObject *tuple;
   PyObject* rdf_module;
   const char *module_name="RDF";
-  
+
+#if PY_MAJOR_VERSION >= 3
+  module = PyModule_Create(&librdf_python_moduledef);
+  dict = PyImport_GetModuleDict();
+  PyDict_SetItemString(dict, "Redland_python", module);
+#else
   module = Py_InitModule("Redland_python", librdf_python_methods);
+#endif
   dict = PyModule_GetDict(module); /* borrowed reference */
 
   tuple = Py_BuildValue ("(iii)", librdf_version_major, librdf_version_minor,
--- a/python/test/test.py
+++ b/python/test/test.py
@@ -41,12 +41,12 @@
 
 model.add_statement(statement)
 
-print "printing all model statements"
+print("printing all model statements")
 # Match against an empty statement - find everything
 statement=RDF.Statement(subject=None, predicate=None, object=None);
 
 for s in model.find_statements(statement):
-  print "  found statement:",s
+  print("  found statement: %s" % (s,))
 
 # Use any rdf/xml parser that is available
 parser=RDF.Parser(name="rdfxml",mime_type="application/rdf+xml")
@@ -54,10 +54,10 @@
   raise "Could not find any rdf/xml parser"
 
 uri=RDF.Uri(string="file:../data/dc.rdf")
-print "made uri", uri
+print("made uri %s" %(uri,))
 
 for s in parser.parse_as_stream(uri, uri):
-  print "found parsed statement:",s
+  print("found parsed statement: %s" % (s,))
   model.add_statement(s)
 
 
@@ -69,49 +69,49 @@
 </rdf:RDF>"""
 
 for s in parser.parse_string_as_stream(rdfxml_string, uri):
-  print "found parsed statement from string:",s
+  print("found parsed statement from string: %s" % (s,))
   model.add_statement(s)
 
-print parser.namespaces_seen()
+print(parser.namespaces_seen())
 
 # add it again just to get some more statements
-print "adding statements again with model.load"
+print("adding statements again with model.load")
 model.load(uri)
 
 
 
-print "printing model"
+print("printing model")
 for s in model.as_stream():
-  print "found statement:",s
+  print("found statement: %s" %(s,))
 
-print "searching model by statement"
+print("searching model by statement")
 
 for s in model.find_statements(RDF.Statement(None, RDF.Uri("http://purl.org/dc/elements/1.1/title"), None)):
-  print "  found statement:",s
+  print("  found statement: %s" % (s,))
 
 
-print "searching model for node targets"
+print("searching model for node targets")
 n1=RDF.Uri("http://www.dajobe.org/")
 n2=RDF.Uri("http://purl.org/dc/elements/1.1/title")
 for node in model.targets(n1,n2):
-  print "  found node:",node
+  print("  found node: %s" % (node,))
 
-print "matching statements"
+print("matching statements")
 if not RDF.Statement(None,None,None).matches(RDF.Statement(n1,n2,"Title")):
-  print "Failed"
+  print("Failed")
 
-print "Testing for None"
-print RDF.Statement(None,None,None).subject
+print("Testing for None")
+print(RDF.Statement(None,None,None).subject)
 
-print "Adding datatyped literal statement to model"
+print("Adding datatyped literal statement to model")
 model.add_typed_literal_statement(subject=RDF.Node(uri_string="http://example.org/subject"),
                                   predicate=RDF.Node(uri_string="http://example.org/predicate"),
                                   string="Literal content",
                                   xml_language="en-GB",
                                   datatype=RDF.Uri(string="http://example.org/datatype"))
 
-print "writing model as RDF/XML to test-out.rdf"
+print("writing model as RDF/XML to test-out.rdf")
 ser=RDF.RDFXMLSerializer()
 ser.serialize_model_to_file("test-out.rdf", model)
 
-print "done"
+print("done")
